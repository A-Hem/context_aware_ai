# TEAM NOTES - Context-Aware Multi-Agent AI System

## Project Structure (as of [DATE])
- Modular architecture: separates core logic, agent config, and model files.
- Core logic in `src/core/` (context injection, knowledge, vector search, agent logic).
- Agents are defined in `config/context_system.yaml` and can be managed via the web UI.
- Ollama Modelfiles in `modelfiles/` (upload/edit via web UI).
- FastAPI web interface in `src/web/` (templates, static, app.py).
- Redis used for both structured knowledge and vector embeddings (semantic search).
- All dependencies tracked in `requirements.txt`. Use `venv/` for isolation.

## Setup & Usage
- Activate virtual environment:  
  `source venv/Scripts/activate` (Windows) or `source venv/bin/activate` (WSL/Linux)
- Install dependencies:  
  `pip install -r requirements.txt`
- Start Redis and Ollama (see README for details).
- Launch web interface:  
  `python start_web_interface.py`
- Access UI at: [http://localhost:8000](http://localhost:8000)

## Web UI Features
- Dashboard: System status, agent overview.
- Agents: Add, edit, delete agents (configurable via UI).
- Models: Upload/view Modelfiles for Ollama.
- Knowledge: Semantic search and exploration of stored knowledge.
- Hot-reload agents via `/api/reload_agents` endpoint (no server restart needed).

## Redis Usage
- Vector index (`context_knowledge_index`) is auto-managed by `vector_manager.py`.
- Knowledge and context items stored with agent/topic metadata.
- No manual Redis key management required.

## Outstanding Issues / TODOs
- [ ] Add static assets (CSS/JS) to `src/web/static/` as needed.
- [ ] Document Modelfile format for new users.
- [ ] Consider per-agent storage quotas (see previous notes).
- [ ] Monitor vector index warnings (non-critical).
- [ ] Add more tests for agent hot-reload and Modelfile upload.

## Next Steps
- Train a new model using the web UI or by adding a Modelfile to `modelfiles/`.
- Use the web UI to manage agents and knowledge.
- Update this file with any new dependencies, config changes, or issues.

---

# REMINDER:  
- Always update this file after any major structure, dependency, or config change.
- Document any issues, workarounds, or user preferences here for team continuity. 

---
2024- Python Orchestrator System Update

- File: src/core/orchestrator.py
- Purpose: Simplified orchestration system for managing agents (formerly workers) and tasks.
- Agents: Register agent classes for different task types. Each agent handles its own tasks.
- Usage: See example in orchestrator.py for registering agents and processing tasks.
- No external dependencies or advanced features (dependency tracking, async, etc.) in this version.
- Easy to extend: Add new agents by subclassing BaseAgent and registering with the orchestrator.

This replaces the previous TypeScript orchestrator/worker system with a more Pythonic, maintainable approach.
--- 